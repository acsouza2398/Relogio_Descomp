Setup:
LDI $0 #Limpando os 7 segmentos
STA @HEX0
STA @HEX1
STA @HEX2
STA @HEX3
STA @HEX4
STA @HEX5

STA @LEDR7 #Limpando os leds
STA @LEDR8
STA @LEDR9

STA @UNI #Inicializando variaveis com 0
STA @DEC
STA @CEN
STA @MUNI
STA @MDEC
STA @MCEN

LDI $9
STA @LIMU #Inicializando limites com 9
STA @LIMD
STA @LIMC
STA @LIMMU
STA @LIMMD
STA @LIMMC

LDI $0
STA @VAR0 #Inicializando constante com 0
LDI $1
STA @VAR1 #Inicializando constante com 1
LDI $10
STA @VAR10 #Inicializando constante com 10
LDI $11
STA @VAR11 #Inicializando constante com 11
LDI $12
STA @VAR12 #Inicializando constante com 12
LDI $13
STA @VAR13 #Inicializando constante com 13
LDI $14
STA @VAR14 #Inicializando constante com 14
LDI $15
STA @VAR15 #Inicializando constante com 15

STA @CLR #Limpar KEY0
STA @510 #Limpar KEY1
STA @509 #Limpar KEY2
STA @508 #Limpar KEY3
STA @507 #Limpar FPGA_RESET

Loop:
LDA @KEY0 #Ler KEY0
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Comparar com 1
JEQ @HubIncremento #Pular pra subrotina de incremento

PosIncremento:
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Comparar com 1
JEQ @HubLimite #Pular pra subrotina de limite

PosLimite:
JSR @Verificar #Pular pra subrotina de verificar limite

LDA @KEY2 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Comparar com 1
JEQ @HubDecremento #Pular pra subrotina de Decremento

PosDecremento:
LDA @FPGA_RESET #Ler FPGA_RESET
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Comparar com 1
JEQ @HubReset #Pular pra subrotina de reset

PosReset:
LDA @UNI #Carrega acumulador com valor da unidade
STA @HEX0 #Carrega unidade no HEX0
LDA @DEC #Carrega acumulador com valor da dezena
STA @HEX1 #Carrega unidade no HEX1
LDA @CEN #Carrega acumulador com valor da centena
STA @HEX2 #Carrega unidade no HEX2
LDA @MUNI #Carrega acumulador com valor da unidade de milhar
STA @HEX3 #Carrega unidade no HEX3
LDA @MDEC #Carrega acumulador com valor da dezena de milhar
STA @HEX4 #Carrega unidade no HEX4
LDA @MCEN #Carrega acumulador com valor da centena de milhar
STA @HEX5 #Carrega unidade no HEX5

JMP @Loop #Reiniciar Loop

HubIncremento:
JSR @Incremento #Para usar RET
JMP @PosIncremento #Voltar pro loop

HubLimite:
JSR @Limite #Para usar RET
JMP @PosLimite #Voltar pro loop

HubDecremento:
JSR @Decremento #Para usar RET
JMP @PosDecremento #Voltar pro loop

HubReset:
JSR @Reset #Para usar RET
JMP @PosReset #Voltar pro loop

Incremento:
STA @CLR
LDA @VAR1 #Verificar overflow
CEQ @FLAG
JEQ @Retorno

LDA @UNI #Carrega acumulador unidade
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @Dezena #Caso 10, pular pra dezena
STA @UNI #Caso contrario, salvar na unidade
RET #Retornar

Dezena:
LDI $0 #Carrega acumulador com 0
STA @UNI #Zera unidade
LDA @DEC #Carrega acumulador dezena
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @Centena #Caso 10, pular pra centena
STA @DEC #Caso contrario, salvar na unidade
RET #Retornar

Centena:
LDI $0 #Carrega acumulador com 0
STA @DEC #Zera dezena
LDA @CEN #Carrega acumulador centena
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @UniMilhar #Caso 10, pular pra unidade de milhar
STA @CEN #Caso contrario, salvar na centena
RET #Retornar

UniMilhar:
LDI $0 #Carrega acumulador com 0
STA @CEN #Zera centena
LDA @MUNI #Carrega acumulador unidade de milhar
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @DecMilhar #Caso 10, pular pra dezena de milhar
STA @MUNI #Caso contrario, salvar na unidade de milhar
RET #Retornar

DecMilhar:
LDI $0 #Carrega acumulador com 0
STA @MUNI #Zera unidade de milhar
LDA @MDEC #Carrega acumulador dezena de milhar
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @CenMilhar #Caso 10, pular pra centena de milhar
STA @MDEC #Caso contrario, salvar na dezena de milhar
RET #Retornar

CenMilhar:
LDI $0 #Carrega acumulador com 0
STA @MDEC #Zera dezena de milhar
LDA @MCEN #Carrega acumulador centena de milhar
SOMA @VAR1 #Soma memoria com acumulador
CEQ @VAR10 #Compara com 10
JEQ @Overflow #Caso 10, pular pra Overflow
STA @MCEN #Caso contrario, salvar na Centena de milhar
RET #Retornar

Overflow:
LDA @VAR1 #Carrega 1
STA @LEDR9 #Led overflow
STA @FLAG #Flag inibir

RET #Retornar

Limite:
STA @510 #Limpar KEY1
LDI $0 #Limpando os 7 segmentos para mostrar o limite
STA @HEX0
STA @HEX1
STA @HEX2
STA @HEX3
STA @HEX4
STA @HEX5
LDI $1
STA @LEDR7 #Liga LEDR0 pra indicar aguardando leitura

LimiteUni:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteUniMax
PosLimiteUni:
STA @LIMU #Guarda na memoria o limite da unidade
STA @HEX0 #Carrega leitura do SW0-7 no HEX0
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLU #Se tiver, guarda e vai embora
JMP @LimiteUni #Caso contrario, faz de novo
PosLU:
LDI $2
STA @LEDR7 #Liga LEDR1 pra indicar aguardando leitura

LimiteDec:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteDecMax
PosLimiteDec:
STA @LIMD #Guarda na memoria o limite da dezena
STA @HEX1 #Carrega leitura do SW0-7 no HEX1
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLD #Se tiver, guarda e vai embora
JMP @LimiteDec #Caso contrario, faz de novo
PosLD:
LDI $4
STA @LEDR7 #Liga LEDR2 pra indicar aguardando leitura

LimiteCen:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteCenMax
PosLimiteCen:
STA @LIMC #Guarda na memoria o limite da centena
STA @HEX2 #Carrega leitura do SW0-7 no HEX2
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLC #Se tiver, guarda e vai embora
JMP @LimiteCen #Caso contrario, faz de novo
PosLC:
LDI $8
STA @LEDR7 #Liga LEDR3 pra indicar aguardando leitura

LimiteMUni:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMUniMax
PosLimiteMUni:
STA @LIMMU #Guarda na memoria o limite da unidade de milhar
STA @HEX3 #Carrega leitura do SW0-7 no HEX3
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLMU #Se tiver, guarda e vai embora
JMP @LimiteMUni #Caso contrario, faz de novo
PosLMU:
LDI $16
STA @LEDR7 #liga LEDR4 pra indicar aguardando leitura

LimiteMDec:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMDecMax
PosLimiteMDec:
STA @LIMMD #Guarda na memoria o limite da dezena de milhar
STA @HEX4 #Carrega leitura do SW0-7 no HEX4
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLMD #Se tiver, guarda e vai embora
JMP @LimiteMDec #Caso contrario, faz de novo
PosLMD:
LDI $32
STA @LEDR7 #Liga LEDR5 pra indicar aguardando leitura

LimiteMCen:
STA @510 #Limpar KEY1
LDA @SW7 #Leitura do SW0-7
ANDI @15 #Aplicar mascara a leitura do botao para só pegar SW(3 downto 0)
CEQ @VAR10 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
CEQ @VAR11 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
CEQ @VAR12 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
CEQ @VAR13 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
CEQ @VAR14 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
CEQ @VAR15 #Verificar overflow do HEX (ele aceita de 10-15, mas o contador não)
JEQ @LimiteMCenMax
PosLimiteMCen:
STA @LIMMC #Guarda na memoria o limite da centena de milhar
STA @HEX5 #Carrega leitura do SW0-7 no HEX5
LDA @KEY1 #Ler KEY1
ANDI @1 #Aplicar máscara a leitura da KEY
CEQ @VAR1 #Ve se KEY1 está apertado
STA @510 #Limpar KEY1
JEQ @PosLMC #Se tiver, guarda e vai embora
JMP @LimiteMCen #Caso contrario, faz de novo
PosLMC:
LDI $0
STA @LEDR7 #Desliga LEDR0-7

RET

LimiteUniMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteUni #Volta

LimiteDecMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteDec #Volta

LimiteCenMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteCen #Volta

LimiteMUniMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteMUni #Volta

LimiteMDecMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteMDec #Volta

LimiteMCenMax:
LDI $9 #Carrega 9 no imediato
JMP @PosLimiteMCen #Volta

Decremento:
STA @509 #Limpa KEY2
LDA @VAR0 #Abaixar overflow
STA @FLAG
STA @LEDR9 #Desligar Led Overflow
STA @LEDR8 #Desligar Led Limite

LDA @UNI #Carrega acumulador unidade
CEQ @VAR0 #Compara com 0
JEQ @Dezena_Sub #Caso 0, pular pra dezena
SUB @VAR1 #Subtrai memoria com acumulador
STA @UNI #Caso contrario, salvar na unidade
RET #Retornar

Dezena_Sub:
LDI $9 #Carrega acumulador com 9
STA @UNI #Coloca 9 na unidade
LDA @DEC #Carrega acumulador dezena
CEQ @VAR0 #Compara com 0
JEQ @Centena_Sub #Caso 0, pular pra centena
SUB @VAR1 #Subtrai memoria com acumulador
STA @DEC #Caso contrario, salvar na unidade
RET #Retornar

Centena_Sub:
LDI $9 #Carrega acumulador com 9
STA @DEC #Coloca 9 na dezena
LDA @CEN #Carrega acumulador centena
CEQ @VAR0 #Compara com 0
JEQ @UniMilhar_Sub #Caso 0, pular pra unidade de milhar
SUB @VAR1 #Subtrai memoria com acumulador
STA @CEN #Caso contrario, salvar na centena
RET #Retornar

UniMilhar_Sub:
LDI $9 #Carrega acumulador com 9
STA @CEN #Coloca 9 centena
LDA @MUNI #Carrega acumulador unidade de milhar
CEQ @VAR0 #Compara com 0
JEQ @DecMilhar_Sub #Caso 0, pular pra dezena de milhar
SUB @VAR1 #Soma memoria com acumulador
STA @MUNI #Caso contrario, salvar na unidade de milhar
RET #Retornar

DecMilhar_Sub:
LDI $9 #Carrega acumulador com 9
STA @MUNI #Zera unidade de milhar
LDA @MDEC #Carrega acumulador dezena de milhar
CEQ @VAR0 #Compara com 0
JEQ @CenMilhar_Sub #Caso 0, pular pra centena de milhar
SUB @VAR1 #Subtrai memoria com acumulador
STA @MDEC #Caso contrario, salvar na dezena de milhar
RET #Retornar

CenMilhar_Sub:
LDI $9 #Carrega acumulador com 9
STA @MDEC #Carrega dezena de milhar
LDA @MCEN #Carrega acumulador centena de milhar
CEQ @VAR0 #Compara com 0
JEQ @Zerar #Caso 0, pular pra Zerar
SUB @VAR1 #Subtrai memoria com acumulador
STA @MCEN #Caso contrario, salvar na Centena de milhar
RET #Retornar

Zerar:
LDA @VAR0 #Carrega 0
STA @LEDR9 #Apaga Led overflow
STA @FLAG #Abaixa Flag inibir
STA @UNI #Zerando variaveis
STA @DEC
STA @CEN
STA @MUNI
STA @MDEC
STA @MCEN

RET #Retornar

Verificar:
LDA @UNI #Carrega valor da unidade
CEQ @LIMU #Compara unidade com o limite
JEQ @VerificarDec #Se estiver no limite, checar dezena
RET
VerificarDec:
LDA @DEC #Carrega valor da dezena
CEQ @LIMD #Compara dezena com o limite
JEQ @VerificarCen #Se estiver no limite, checar centena
RET
VerificarCen:
LDA @CEN #Carrega valor da centena
CEQ @LIMC #Compara centena com o limite
JEQ @VerificarMUni #Se estiver no limite, checar unidade de milhar
RET
VerificarMUni:
LDA @MUNI #Carrega valor da unidade de milhar
CEQ @LIMMU #Compara unidade de milhar com o limite
JEQ @VerificarMDec #Se estiver no limite, checar dezena de milhar
RET
VerificarMDec:
LDA @MDEC #Carrega valor da dezena de milhar
CEQ @LIMMD #Compara dezena de milhar com o limite
JEQ @VerificarMCen #Se estiver no limite, checar centena de milhar
RET
VerificarMCen:
LDA @MCEN #Carrega valor da centena de milhar
CEQ @LIMMC #Compara centena de milhar com o limite
JEQ @LimiteAtingido #Se estiver no limite, pular pra SR de limite atingido
RET

LimiteAtingido:
LDA @VAR1 #Carrega 1
STA @LEDR8 #Led Limite
STA @FLAG #Flag inibir
RET

Reset:
STA @507 #Limpar FPGA_RESET
LDA @VAR0 #Carregar 0
STA @FLAG #Abaixando flag
STA @LEDR8 #Desligando Led Limite
STA @LEDR9 #Desligando Led Overflow
STA @UNI #Zerando as variáveis
STA @DEC
STA @CEN
STA @MUNI
STA @MDEC
STA @MCEN
LDI $9
STA @LIMU #Limpando limites
STA @LIMD
STA @LIMC
STA @LIMMU
STA @LIMMD
STA @LIMMC
RET

Retorno:
RET