library ieee;
use ieee.std_logic_1164.all;

entity processador is
  -- Total de bits das entradas e saidas
  generic ( larguraDados : natural := 8;
        larguraEnderecos : natural := 9;
		  tamanhoCommando : natural := 2
  );
  port   (
    CLOCK_50 : in std_logic;
	 reset : in std_logic;
	 instruction : in std_logic_vector(12 downto 0);
	 data_in : in std_logic_vector(7 downto 0);
	 rd : out std_logic;
	 wr : out std_logic;
	 data_out : out std_logic_vector(7 downto 0);
	 data_address : out std_logic_vector(8 downto 0);
	 rom_address : out std_logic_vector(8 downto 0)
  );
end entity;


architecture arquitetura of processador is

-- Faltam alguns sinais:
  signal chavesX_ULA_B : std_logic_vector (larguraDados-1 downto 0);
  signal chavesY_MUX_A : std_logic_vector (larguraDados-1 downto 0);
  signal MUX_REG1 : std_logic_vector (larguraDados-1 downto 0);
  signal MUX_REGJ : std_logic_vector (larguraEnderecos-1 downto 0);
  signal REG1_ULA_A : std_logic_vector (larguraDados-1 downto 0);
  signal Saida_ULA : std_logic_vector (larguraDados-1 downto 0);
  signal Sinais_Controle : std_logic_vector (11 downto 0);
  signal Endereco : std_logic_vector (larguraEnderecos-1 downto 0);
  signal Inc : std_logic_vector (larguraEnderecos-1 downto 0);
  signal proxPC : std_logic_vector (larguraEnderecos-1 downto 0);
  signal Chave_Operacao_ULA : std_logic;
  signal CLK : std_logic;
  signal SelMUX : std_logic;
  signal SelMUXjmp : std_logic_vector (1 downto 0);
  signal Habilita_A : std_logic;
  signal Reset_A : std_logic;
  signal habilita: std_logic;
  signal addr: std_logic_vector (7 downto 0);
  signal destino: std_logic_vector (8 downto 0);
  signal Operacao_ULA : std_logic_vector (tamanhoCommando-1 downto 0);
  signal Sinais_romdec : std_logic_vector (12 downto 0);
  signal habLeituraMEM : std_logic;
  signal habEscritaMEM : std_logic;
  signal jmp : std_logic;
  signal jeq : std_logic;
  signal habFlagEq : std_logic;
  signal REG_Eq_S : std_logic;
  signal flag_Z : STD_LOGIC;
  signal jsr : STD_LOGIC;
  signal ret : STD_LOGIC;
  signal habEscritaRetorno : STD_LOGIC;
  signal Entrada_dec : STD_LOGIC_VECTOR (3 downto 0);
  signal entradaLogic : STD_LOGIC_VECTOR (4 downto 0);
  signal endRetorno : STD_LOGIC_VECTOR (larguraEnderecos-1 downto 0);
  signal dLeituraRAM : STD_LOGIC_VECTOR (larguraDados-1 downto 0);

begin

-- Instanciando os componentes:

-- O port map completo do MUX.
MUX1 :  entity work.muxGenerico2x1  generic map (larguraDados => larguraDados)
        port map( entradaA_MUX => data_in,
                 entradaB_MUX =>  addr,
                 seletor_MUX => SelMUX,
                 saida_MUX => MUX_REG1);
					  
muxGenerico4x1 :  entity work.muxGenerico4x1  generic map (larguraDados => larguraEnderecos)
        port map( entradaA_MUX => Inc,
						entradaB_MUX => destino,
						entradaC_MUX => endRetorno,
                  seletor_MUX => SelMUXjmp,
                  saida_MUX => MUX_REGJ);

-- O port map completo do Acumulador.
REGA : entity work.registradorGenerico   generic map (larguraDados => larguraDados)
          port map (DIN => Saida_ULA, DOUT => REG1_ULA_A, ENABLE => Habilita_A, CLK => CLK, RST => Reset_A);

-- O port map completo do Program Counter.
PC : entity work.registradorGenerico   generic map (larguraDados => larguraEnderecos)
          port map (DIN => proxPC, DOUT => Endereco, ENABLE => '1', CLK => CLK, RST => '0');

incrementaPC :  entity work.somaConstante  generic map (larguraDados => larguraEnderecos, constante => 1)
        port map( entrada => Endereco, saida => Inc);
		  
regRet : entity work.registradorGenerico   generic map (larguraDados => larguraEnderecos)
          port map (DIN => Inc, DOUT => endRetorno, ENABLE => habEscritaRetorno, CLK => CLK, RST => Reset_A);

flipFlop : entity work.flipFlop
          port map (DIN => flag_Z, DOUT => REG_Eq_S, ENABLE => habFlagEq, CLK => CLK, RST => '0');

-- O port map completo da ULA:
ULA1 : entity work.ULASomaSub  generic map(larguraDados => larguraDados)
          port map (entradaA => REG1_ULA_A, entradaB => MUX_REG1, saida => Saida_ULA, flag_Z => flag_Z, seletor => Operacao_ULA);

decoderInstru :  entity work.decoderInstru
        port map( opcode => Entrada_dec,
                 saida => Sinais_Controle);
					  
logicDesvio :  entity work.logicDesvio
        port map( entrada => entradaLogic,
                 saida => SelMUXjmp);
					  
Entrada_dec <= instruction(12 downto 9);
habilita <= instruction(8);
addr <= instruction(7 downto 0);
destino <= instruction(8 downto 0);


habEscritaRetorno <= Sinais_Controle(11);
jmp <= Sinais_Controle(10);
ret <= Sinais_Controle(9);
jsr <= Sinais_Controle(8);	
jeq <= Sinais_Controle(7);		 
selMUX <= Sinais_Controle(6);
Habilita_A <= Sinais_Controle(5);
Operacao_ULA <= Sinais_Controle(4 downto 3);
habFlagEq <= Sinais_Controle(2);	
rd <= Sinais_Controle(1);
wr <= Sinais_Controle(0);

proxPC <= MUX_REGJ;

entradaLogic(0) <= REG_Eq_S;
entradaLogic(1) <= jeq;
entradaLogic(2) <= jsr;
entradaLogic(3) <= ret;
entradaLogic(4) <= jmp;

-- Saidas:

data_out <= REG1_ULA_A;
rom_address <= endereco;
data_address <= destino;

end architecture;